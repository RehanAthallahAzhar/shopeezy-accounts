// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (id, name, username, email, password, phone_number, "address", role)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateUserParams struct {
	ID          uuid.UUID
	Name        string
	Username    string
	Email       string
	Password    string
	PhoneNumber string
	Address     string
	Role        string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.PhoneNumber,
		arg.Address,
		arg.Role,
	)
}

const deleteUser = `-- name: DeleteUser :execresult
UPDATE users
SET deleted_at = now()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteUser, id)
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, "name", username, email, "password",phone_number, "address", "role", created_at, updated_at
FROM users
WHERE deleted_at IS NULL
`

type GetAllUsersRow struct {
	ID          uuid.UUID
	Name        string
	Username    string
	Email       string
	Password    string
	PhoneNumber string
	Address     string
	Role        string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.PhoneNumber,
			&i.Address,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT id, "name", username, email, "password",phone_number, "address", "role", created_at, updated_at
FROM users
WHERE id = $1 AND deleted_at IS NULL
`

type GetUserByIdRow struct {
	ID          uuid.UUID
	Name        string
	Username    string
	Email       string
	Password    string
	PhoneNumber string
	Address     string
	Role        string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Address,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, "name", username, email, "password",phone_number, "address", "role", created_at, updated_at
FROM users
WHERE username = $1 AND deleted_at IS NULL
`

type GetUserByUsernameRow struct {
	ID          uuid.UUID
	Name        string
	Username    string
	Email       string
	Password    string
	PhoneNumber string
	Address     string
	Role        string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Address,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :execresult
UPDATE users
SET
    "name" = $2,
    username = $3,
    email = $4,
    "password" = $5,
    "role" = $6,
    updated_at = now()
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateUserParams struct {
	ID       uuid.UUID
	Name     string
	Username string
	Email    string
	Password string
	Role     string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Role,
	)
}
